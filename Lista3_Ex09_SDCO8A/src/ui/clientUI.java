
package ui;

/**
 * Lab05: Sistema P2P
 * Autor: Gabriel Finger Conte
 */

import java.rmi.RemoteException;
import java.rmi.registry.Registry;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import rmi.IMensagem;
import rmi.PeerLista;

/**
 * Interface gráfica para interação do cliente com os pares do sistema P2P.
 */
public class clientUI extends javax.swing.JFrame {

    private Registry registro;
    private String[] currPeerList;
    private IMensagem stub;
    private List<PeerLista> listaPeers;
    private PeerLista conectedPeer;
    private static clientUI instance;
    
    /**
     * Construtor
     * @param registro_ Registro RMI utilizado pelo cliente.
     * @param listaPeers_ Lista de pares disponíveis para conexão.
     */
    public clientUI(Registry registro_, List<PeerLista> listaPeers_) {
        initComponents();
        instance = this;
        this.error_jTextArea.setVisible(false);
        this.setVisible(true);
        this.registro = registro_;
        this.listaPeers = listaPeers_;
        this.setJList();
    }
    
    /**
     * Obtém a instância única da interface gráfica do cliente.
     * @return Instância única da clientUI.
     */
    public static clientUI getInstance() {
        return instance;
    }
    
    /**
     * Obtém o par conectado ao cliente.
     * @return Par conectado ao cliente.
     */
    public PeerLista getConnectedPeer(){
        return this.conectedPeer;
    }

    /**
     * Obtém o stub do cliente para interação com o par.
     * @return Stub do cliente.
     */
    public IMensagem getStub() {
        return this.stub;
    }

    /**
     * Configura a lista de pares disponíveis na interface gráfica.
     */
    private void setJList() {
        this.error_jTextArea.setVisible(false);
        try {
            this.currPeerList = this.registro.list();
            
            DefaultListModel<String> listModel = new DefaultListModel<>();
            for (String peer : this.currPeerList) {
                listModel.addElement(peer);
            }

            this.peer_jList.setModel(listModel);

        } catch (RemoteException ex) {
            Logger.getLogger(clientUI.class.getName()).log(Level.SEVERE, null, ex);
            this.error_jTextArea.setText("""
                                         Some error has occured,
                                         registry inacessible.
                                         Try refresh after a while...""");
            this.error_jTextArea.setVisible(true);
            this.connectButton.setEnabled(false);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        peer_list = new javax.swing.ButtonGroup();
        ui_title = new javax.swing.JLabel();
        peerListPanel = new javax.swing.JPanel();
        peer_jScrollPanel = new javax.swing.JScrollPane();
        peer_jList = new javax.swing.JList<>();
        description_jScrollPanel = new javax.swing.JScrollPane();
        description_jTextArea = new javax.swing.JTextArea();
        error_jScrollPanel = new javax.swing.JScrollPane();
        error_jTextArea = new javax.swing.JTextArea();
        refreshButton = new javax.swing.JButton();
        connectButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Active Peers");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMaximumSize(new java.awt.Dimension(1920, 1080));
        setMinimumSize(new java.awt.Dimension(800, 600));
        setResizable(false);
        setSize(new java.awt.Dimension(800, 600));

        ui_title.setFont(new java.awt.Font("Arial", 0, 36)); // NOI18N
        ui_title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ui_title.setText("Peer To Peer Fortune System: Active Peers");

        peer_jList.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        peer_jScrollPanel.setViewportView(peer_jList);

        description_jTextArea.setEditable(false);
        description_jTextArea.setColumns(1);
        description_jTextArea.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        description_jTextArea.setRows(1);
        description_jTextArea.setTabSize(1);
        description_jTextArea.setText("Select the desired Peer to\nconnect and click in the button\ndown bellow.");
        description_jTextArea.setToolTipText("");
        description_jTextArea.setAutoscrolls(false);
        description_jTextArea.setBorder(null);
        description_jTextArea.setCaretColor(java.awt.Color.lightGray);
        description_jTextArea.setDisabledTextColor(java.awt.Color.lightGray);
        description_jTextArea.setFocusable(false);
        description_jTextArea.setOpaque(false);
        description_jTextArea.setRequestFocusEnabled(false);
        description_jTextArea.setVerifyInputWhenFocusTarget(false);
        description_jScrollPanel.setViewportView(description_jTextArea);

        error_jTextArea.setEditable(false);
        error_jTextArea.setColumns(1);
        error_jTextArea.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        error_jTextArea.setForeground(new java.awt.Color(255, 0, 0));
        error_jTextArea.setRows(1);
        error_jTextArea.setTabSize(1);
        error_jTextArea.setText("Some error has occured,\nregistry inacessible.");
        error_jTextArea.setToolTipText("");
        error_jTextArea.setAutoscrolls(false);
        error_jTextArea.setBorder(null);
        error_jTextArea.setCaretColor(java.awt.Color.lightGray);
        error_jTextArea.setDisabledTextColor(java.awt.Color.lightGray);
        error_jTextArea.setFocusable(false);
        error_jTextArea.setOpaque(false);
        error_jTextArea.setRequestFocusEnabled(false);
        error_jTextArea.setVerifyInputWhenFocusTarget(false);
        error_jScrollPanel.setViewportView(error_jTextArea);

        refreshButton.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        refreshButton.setText("Refresh");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        connectButton.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        connectButton.setText("Connect To Peer");
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout peerListPanelLayout = new javax.swing.GroupLayout(peerListPanel);
        peerListPanel.setLayout(peerListPanelLayout);
        peerListPanelLayout.setHorizontalGroup(
            peerListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(peerListPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(peer_jScrollPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(peerListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(error_jScrollPanel)
                    .addComponent(description_jScrollPanel)
                    .addGroup(peerListPanelLayout.createSequentialGroup()
                        .addGap(0, 64, Short.MAX_VALUE)
                        .addGroup(peerListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(connectButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(refreshButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        peerListPanelLayout.setVerticalGroup(
            peerListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, peerListPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(peerListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(peerListPanelLayout.createSequentialGroup()
                        .addComponent(description_jScrollPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(error_jScrollPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 210, Short.MAX_VALUE)
                        .addComponent(refreshButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(connectButton))
                    .addComponent(peer_jScrollPanel))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ui_title, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(peerListPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(ui_title)
                .addGap(18, 18, 18)
                .addComponent(peerListPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Método executado ao clicar no botão "Refresh". Atualiza a lista de pares disponíveis na interface gráfica.
     * @param evt Evento de clique no botão "Refresh".
     */
    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        this.setJList();
    }//GEN-LAST:event_refreshButtonActionPerformed

    /**
     * Método executado ao clicar no botão "Connect To Peer". Conecta o cliente ao par selecionado na lista.
     * @param evt Evento de clique no botão "Connect To Peer".
     */
    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed
        // Pega o valor do elemento selecionado
        String selectedPeer = this.peer_jList.getSelectedValue();
        // Inicializa o index do peer selecionado como erro
        int peerIndex = -1;
        
        // Verifica se algum peer válido foi selecionado
        for(PeerLista peer_ : this.listaPeers){
            if(peer_.getNome().equals(selectedPeer)){
                // Se sim, altera o índice
                peerIndex = this.listaPeers.indexOf(peer_);
            }
        }
        
        // Verifica se um peer válido foi selecionado
        if (peerIndex >= 0) {
            // Trecho adaptado de Lucio A. Rocha 
            try { 
                // Salva a referência para o peer selecionado
                this.conectedPeer = this.listaPeers.get(peerIndex);
                // Tenta criar a conexão com o peer pelo registry
                stub = (IMensagem) registro.lookup(this.conectedPeer.getNome());
                System.out.println("Conectado no peer: " + selectedPeer);
                // Fecha a janela para continuar no terminal
                this.dispose();
            } catch (java.rmi.ConnectException e) {
                this.error_jTextArea.setText("\n" + selectedPeer + " indisponivel. ConnectException.");
                this.error_jTextArea.setVisible(true);
            } catch (java.rmi.NotBoundException e) {
                this.error_jTextArea.setText("\n" + selectedPeer + " indisponivel. NotBoundException.");
                this.error_jTextArea.setVisible(true);
            } catch (RemoteException ex) {
                this.error_jTextArea.setText("\n" + selectedPeer + " indisponivel. RemoteException.");
                this.error_jTextArea.setVisible(true);
            }// try-catch   
        }else{
            this.error_jTextArea.setText("\nPlease select a Peer!");
            this.error_jTextArea.setVisible(true);
        }// if-else
    }//GEN-LAST:event_connectButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton connectButton;
    private javax.swing.JScrollPane description_jScrollPanel;
    private javax.swing.JTextArea description_jTextArea;
    private javax.swing.JScrollPane error_jScrollPanel;
    private javax.swing.JTextArea error_jTextArea;
    private javax.swing.JPanel peerListPanel;
    private javax.swing.JList<String> peer_jList;
    private javax.swing.JScrollPane peer_jScrollPanel;
    private javax.swing.ButtonGroup peer_list;
    private javax.swing.JButton refreshButton;
    private javax.swing.JLabel ui_title;
    // End of variables declaration//GEN-END:variables
}
